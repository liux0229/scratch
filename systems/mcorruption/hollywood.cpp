

#include <iostream>
#include <string>
#include <algorithm>
#include <utility>
#include <map>
#include <cstdio>

using namespace std;

short code[] = {
0xeb65, 0xc528, 0xc62b, 0xc1f3, 0x1fb8, 0x0d14, 0xcd30, 0x4160,
0x404c, 0xb161, 0xcd54, 0xc578, 0x406c, 0x1fc4, 0x4992, 0x1f34,
0x1f85, 0x4da9, 0x47c1, 0x4075, 0x9f39, 0x8d95, 0x4e8d, 0x1e8a,
0xcdf1, 0x4adc, 0x40ea, 0x1f56, 0x40bd, 0x4dc9, 0xc5e3, 0x4105,
0x5c3c, 0xcca4, 0x8d99, 0x8df3, 0x4c36, 0x4a44, 0xc10e, 0x5148,
0x4e72, 0xcb94, 0xc36a, 0xce54, 0xf16e, 0x4e4a, 0x4b37, 0x4386,
0x8d91, 0x4e9f, 0x49db, 0x4383, 0xc785, 0xcebb, 0x44e0, 0xc3c7,
0x9c7f, 0x43a4, 0x4ed0, 0x484c, 0x43ef, 0x9ff8, 0x9f8c, 0x4f3b,
0x4855, 0xc223, 0xc37f, 0x0f00, 0x4f30, 0xc2a0, 0xc210, 0x1d4b,
0xcf6c, 0xc4da, 0xc26c, 0x4047, 0x4f4d, 0x424c, 0x428e, 0x5c93,
0x4fae, 0x494e, 0x4272, 0x9f02, 0xcfb2, 0x444c, 0x4292, 0x9d7a,
0x0fc2, 0x4fda, 0x4758, 0x42ea, 0x2bf6, 0xce3a, 0xc6a2, 0x430a,
0xc00f, 0xc429, 0xcfce, 0x4620, 0x430e, 0xce35, 0x8e18, 0xc476,
0xc2ba, 0xc966, 0xe758, 0xc457, 0xcd85, 0x4988, 0x24e3, 0xc4b7,
0x4328, 0x49a8, 0xc4c5, 0x04f8, 0x0496, 0x44b0, 0x4cca, 0x49cc,
0x4465, 0x049b, 0x84f6, 0xc4d8, 0xc972, 0xc9f4, 0x16c6, 0xd53d,
0x971f, 0xc514, 0xcac1, 0x4008, 0x5e33, 0xcd30, 0xc57c, 0x404c,
0x9f52, 0xcd54, 0xc622, 0x406c, 0x5a7c, 0x4db5, 0x4451, 0x408c,
0x1f8e, 0x1f19, 0x0d65, 0xcdb5, 0xc6c3, 0x408e, 0x4df9, 0xe8ed,
0x4dea, 0x4028, 0x40e6, 0x1c6a, 0x4dc9, 0xc7bf, 0xc105, 0x4610,
0xcca4, 0x8c4d, 0x8df3, 0x4c36, 0x411e, 0xc10e, 0x9f41, 0x4e72,
0xc2fe, 0xc36a, 0x9cd6, 0x0e7e, 0x4e4a, 0x4463, 0x4387, 0x41a0,
0x4e9f, 0x490b, 0x4383, 0xfaf9, 0xcebb, 0x420a, 0x43c8, 0xeba7,
0x4ed8, 0x4438, 0x43e8, 0x4e5e, 0x0f77, 0x8f0d, 0xcf3b, 0x4669,
0xc223, 0x9d20, 0x4f38, 0x49ec, 0xc208, 0x1f6f, 0xc3c5, 0x705c,
0xcf58, 0xc43e, 0x4269, 0x455f, 0x4fba, 0x4644, 0x428a, 0x9c50,
0x4bbd, 0x0fac, 0xcfba, 0xc504, 0x428a, 0x4087, 0x0fcc, 0x4fee,
0x49dc, 0x42ee, 0x1eed, 0x4fce, 0xc644, 0xc30e, 0xcd05, 0xce2e,
0xc814, 0xc32e, 0x5e32, 0x1f09, 0xce36, 0xc8d8, 0x494b, 0xcf4f,
0x149d, 0x0454, 0x846b, 0xc44f, 0x4838, 0x4990, 0xcb99, 0x1624,
0x04b8, 0xc48c, 0x4382, 0x4990, 0x4e81, 0x44a8, 0xcecc, 0x49d4,
0x45da, 0xc4cc, 0xcca6, 0xc9ec, 0xc7f2, 0xc534, 0x4e1c, 0xc814,
0x16e6, 0x0524, 0xcd3b, 0x4a06, 0x400c, 0xc2db, 0x0f7d, 0x4d68,
0xc482, 0xc064, 0x0df9, 0x9d40, 0xf339, 0x4db9, 0x409d, 0x4094,
0x64c5, 0x4d99, 0x4725, 0xc085, 0xcf8a, 0x4dfa, 0x4114, 0xc0d5,
0x1f5a, 0x4b9e, 0x4dd2, 0x4777, 0x4109, 0x9d02, 0xcc31, 0x47fb,
0xc129, 0xcc94, 0x8c7a, 0x0c00, 0x4c32, 0xc6d4, 0xc34e, 0x1c5e,
0xce56, 0xc886, 0xc36e, 0xafa7, 0x9ebc, 0x9c1f, 0x4eb3, 0x43d6,
0x43ab, 0x41ba, 0x0e8f, 0xcebb, 0xc80b, 0x43c8, 0x1f57, 0xcedf,
0x448a, 0x43e8, 0x44ed, 0x0f05, 0x4f37, 0xc53f, 0xc20f, 0x912e,
0xcf17, 0xc35f, 0x420c, 0x4684, 0x9da0, 0x8f58, 0xcf6c, 0xc570,
0xc26c, 0x9d61, 0x4f4d, 0x49af, 0x428e, 0x4097, 0x4c8e, 0x4f9a,
0x436c, 0x42aa, 0x9d3e, 0x8f9a, 0x4fae, 0x42b4, 0x42d2, 0xecf1,
0x4fd2, 0x4560, 0x42f2, 0x9dc4, 0xb206, 0xce36, 0xcbae, 0xc326,
0xdc07, 0xce16, 0x428e, 0x430a, 0x9ca2, 0x96fa, 0x0443, 0xc45a,
0xcd5c, 0x496b, 0x097c, 0xc4bb, 0x4d84, 0x498c, 0xcf89, 0x1618,
0x04a0, 0xc490, 0x4244, 0x498c, 0x2097, 0x44f0, 0xce00, 0x49e8,
0x1640, 0x84fc, 0xc4d0, 0xc9ac, 0xc808, 0xc88b, 0x4712, 0x9798,
0x8534, 0x4510, 0xc677, 0x400c, 0x5e5e, 0xcd70, 0xc53c, 0x4068,
0xa310, 0xcd50, 0xc0b6, 0x4088, 0x1f34, 0x0d9d, 0x4da9, 0x4132,
0x40a5, 0x4d1c, 0x0ded, 0x8d8b, 0xcdf9, 0x4b26, 0x40d6, 0xc4e7,
0x4dda, 0x4640, 0x40f6, 0x4cb8, 0x0c52, 0x8c0b, 0xcc29, 0x44ad,
0xc125, 0xdc12, 0xc403, 0x4c32, 0x4284, 0xc34e, 0xab76, 0x4e56,
0xc632, 0xc36e, 0xb260, 0x4eb6, 0x4622, 0x438f, 0x9d6d, 0x1c1a,
0x0eb7, 0x4e93, 0x48ff, 0xc38f, 0xc6c8, 0x4eec, 0x48c6, 0xc3eb,
0x47ef, 0x4ecc, 0x4704, 0x420b, 0x1f08, 0xcf33, 0xc2bd, 0x422b,
0xcf96, 0x8f0f, 0x0f0e, 0x4f2c, 0xc2e0, 0xc250, 0x9d66, 0xcf50,
0xc67c, 0xc270, 0x4198, 0x0f89, 0x4fb6, 0x461e, 0x42a6, 0x4f1f,
0x0fcb, 0x0fb4, 0xcfb6, 0xc73e, 0x42ca, 0xf8da, 0x4fda, 0x4986,
0x42ea, 0x40f9, 0x4e3a, 0x4236, 0xc30a, 0xc115, 0xce1a, 0xc870,
0xc32a, 0xb239, 0x4e36, 0x48e0, 0xc94a, 0x955d, 0x445b, 0xce08,
0xc96a, 0x16c3, 0x8497, 0xc4b3, 0x4f16, 0x4994, 0xdea4, 0x448c,
0x49c2, 0xc9b4, 0x4f91, 0x0496, 0x44f0, 0x484e, 0xc9e8, 0x4bfe,
0x44d0, 0xcde0, 0xc9f4, 0xc537, 0xc600, 0xc530, 0x42f8, 0xc824,
0x6328, 0x4508, 0xc68b, 0x4044, 0xfd76, 0xa952, 0xcd54, 0x47c8,
0xc06c, 0x1d0b, 0x8dad, 0x4db8, 0x4bbe, 0x4095, 0x56a2, 0x4d98,
0x4a63, 0x40b5, 0xe98b, 0xcdf9, 0xc459, 0x40d6, 0x31e9, 0xcdd9,
0x4bac, 0x40f6, 0x5f91, 0x1eb5, 0x0c1d, 0xcc29, 0xc713, 0x4125,
0xcf2a, 0xc439, 0xc10d, 0x1c40, 0x4e72, 0xc258, 0xc36a, 0x410b,
0xce52, 0xc756, 0xc38a, 0x4eb4, 0x8e8e, 0x4e9f, 0x4661, 0x43a6,
0x5d34, 0xfef4, 0x4925, 0xcefb, 0xc863, 0x43e4, 0x9d69, 0x8ee7,
0x4ecc, 0x48b8, 0x420c, 0x468b, 0x4e36, 0xcf1f, 0xc79d, 0x4227,
0xcf1a, 0xa943, 0x4f2c, 0x48c4, 0xc250, 0x9dd4, 0x8f7c, 0xcf54,
0xc8a6, 0xc284, 0x1d3d, 0x4605, 0x0f82, 0x4f9a, 0x43d6, 0x42aa,
0x413d, 0x41db, 0xcf23, 0xa9ca, 0x0fd4, 0x4fda, 0x4486, 0x42ea,
0x417d, 0x0e06, 0x4e32, 0x48e2, 0xc312, 0x9f21, 0xce12, 0xc2dc,
0xc332, 0xc169, 0x4e2e, 0xcc56, 0xc952, 0xf603, 0x4453, 0xccc6,
0xc972, 0x44bf, 0xcf97, 0xc4b7, 0x4daa, 0x49a8, 0xc7a8, 0x4490,
0x4f84, 0xc9c8, 0x44ab, 0x4e12, 0x44e8, 0x48cc, 0xc9f0, 0x5fe7,
0x44c8, 0xcf16, 0xc808, 0x9583, 0xc530, 0xcf5a, 0x4828, 0x9727,
0xc508, 0x43d4, 0x4044, 0x1f46, 0xcd68, 0xcbde, 0xc064, 0x9f6b,
0xcd48, 0xc438, 0x4084, 0x4f92, 0x4da7, 0x8fa9, 0x4d99, 0x45b1,
0x40b5, 0x4cfe, 0xcdf9, 0xc64d, 0x40d6, 0x4065, 0x1f56, 0x40ea,
0x4dca, 0x47bc, 0x4105, 0x1ebd, 0xd019, 0xcc15, 0xc631, 0xc12d,
0xcc84, 0x8c76, 0x0e40, 0x4e72, 0xc20a, 0xc36a, 0xd26a, 0xce52,
0xc20e, 0xc38a, 0x4e37, 0x0eeb, 0x0ea5, 0x4e97, 0x469f, 0x43af,
0x438c, 0x4ef7, 0xc77f, 0xc3cf, 0x44e9, 0x4ed0, 0x4948, 0x43f0,
0x9f7b, 0xff36, 0x5427, 0x4f33, 0xc889, 0xc22b, 0xd42c, 0xcf13,
0xc4f5, 0xc24b, 0x5a6c, 0xcf6c, 0xc95e, 0xc26c, 0xaf0f, 0xcf4c,
0xca66, 0x428d, 0x2c74, 0x4fae, 0x4812, 0x42ae, 0x9c68, 0x2bb6,
0x4ffa, 0xc3a8, 0xc2ca, 0x4f63, 0x0f89, 0x0fe8, 0x4fd6, 0x4944,
0x4306, 0x4ebf, 0x0e78, 0x8e14, 0xce1a, 0xc65c, 0xc32a, 0xb239,
0xce7a, 0x4676, 0xc94a, 0xc8df, 0xc8eb, 0x046b, 0x4457, 0xc370,
0x4987, 0x963f, 0xc43a, 0x0594, 0x04a0, 0xc48c, 0xce00, 0x49b4,
0xc479, 0x04a7, 0x04ca, 0x44e8, 0x4d22, 0xc9f0, 0x60ea, 0x44c8,
0xcf08, 0xc808, 0xc400, 0xc530, 0xcc8a, 0x4828, 0x172f, 0xc508,
0x4850, 0xc9c4, 0x4957, 0x4de5, 0x8d4f, 0x8d62, 0xcd50, 0xc6ba,
0xc088, 0x9c8b, 0x4db0, 0x4b7c, 0x40a9, 0xdaa7, 0x4d91, 0x485f,
0x40c9, 0x1dc2, 0xcdf1, 0xc5d5, 0x40ea, 0x5ef9, 0x4dd2, 0x4b86,
0x410a, 0xe930, 0x4c31, 0x45ad, 0xc129, 0x9e95, 0x8c3d, 0xcc09,
0xcacd, 0xc0c5, 0x1cfe, 0x9ead, 0xa012, 0xce5a, 0xc300, 0xc376,
0x7eb0, 0xf179, 0x4eb2, 0x4b5c, 0x43ab, 0xedb0, 0x4e93, 0x48d3,
0x43cb, 0x1c40, 0xcef3, 0xc90f, 0x43ec, 0x4582, 0x4ecc, 0x48ae,
0x420c, 0x4e07, 0x4f33, 0x4457, 0xc22b, 0xdf13, 0x8f21, 0xcf7f,
0xc203, 0xc3c7, 0x6a39, 0xcf58, 0xc98c, 0xc268, 0xc56d, 0xcfbb,
0xcf3d, 0x0fe8, 0x0f97, 0x4f9a, 0x48dc, 0x42aa, 0x1e38, 0x4ffa,
0x458a, 0xc24a, 0xd2aa, 0x4fda, 0x4724, 0x42ea, 0x5fcd, 0xf1fc,
0x4e32, 0x4908, 0x4312, 0xfa43, 0xce12, 0xc3e8, 0xc332, 0xce79,
0xe027, 0x4ff6, 0xcd5e, 0xc966, 0x96de, 0x047b, 0x444f, 0xcebe,
0x498f, 0xfcae, 0xc4af, 0x431c, 0x49b0, 0xdfa3, 0xc488, 0x4de8,
0xc9d0, 0x4ac3, 0x53d3, 0x44d4, 0x4806, 0xc9ec, 0x96ef, 0x050a,
0xc52c, 0xcf8e, 0xc80c, 0xd86c, 0xc514, 0x4e04, 0x482c, 0xcc46,
0x44f8, 0xc10e, 0x4054, 0x4dd9, 0x8d17, 0x8d6a, 0xcd48, 0xc796,
0xc084, 0x9f3c, 0x1c93, 0x4d94, 0x460b, 0x40ad, 0x4fab, 0x29c9,
0x4d79, 0x450f, 0xc0d5, 0xdaef, 0x4dda, 0x4af8, 0x40f6, 0x301f,
0x4c3a, 0x4afc, 0x4115, 0x5f32, 0xcc19, 0xc6f9, 0xc135, 0x1f47,
0xcdf9, 0xc0a3, 0x4356, 0xfd4d, 0xce5a, 0xc9a0, 0xc376, 0x4d98,
0xceba, 0xc5b4, 0x4396, 0x41b7, 0x41b2, 0x32aa, 0x4eff, 0x487d,
0x4347, 0x1f48, 0xcedf, 0xc80b, 0x43e8, 0x46fb, 0x4f38, 0x4990,
0x4208, 0x5c8b, 0x0f23, 0x4f17, 0xcad3, 0xc22f, 0xcd44, 0xcf77,
0xc74b, 0xc3cf, 0x1dd4, 0x8f7c, 0xcf54, 0xc5a4, 0xc284, 0x9d97,
0xd087, 0x4fad, 0x46a9, 0x42ae, 0x1dae, 0x4f8e, 0x424a, 0x42ce,
0x4341, 0xcf6e, 0xc310, 0x42ee, 0x1d5a, 0x5fcd, 0xfc01, 0x4e32,
0x4364, 0x4312, 0x8d39, 0xce12, 0xc7e0, 0xc332, 0xfa28, 0xce72,
0xc7c2, 0x42d2, 0xc4d7, 0x8406, 0x846c, 0x444f, 0x411b, 0xc98e,
0x54bf, 0x9698, 0xc49b, 0x492e, 0x49ac, 0xc7b2, 0xc4f4, 0x4398,
0xc94c, 0x7631, 0x44d4, 0x423a, 0x49ec, 0xc445, 0x8528, 0x0516,
0xc530, 0xcdfe, 0xc814, 0x9798, 0x9794, 0x4354, 0x4508, 0xcf96,
0x49cc, 0xcfda, 0x4d54, 0x4702, 0xc06c, 0x9fc4, 0x8d98, 0xcdb8,
0xc498, 0xc094, 0x1f18, 0x0db4, 0x4d91, 0x4863, 0x40c9, 0x6831,
0x4d71, 0x47d7, 0xc0e9, 0xc6ec, 0x4dd2, 0x40be, 0x410a, 0x430d,
0x4c32, 0x4070, 0x4129, 0x5c14, 0x8c27, 0xcc09, 0xc0bf, 0xc0c5,
0xccfd, 0x9ed5, 0x6003, 0x4e5a, 0xc48c, 0xc376, 0x9c3a, 0x8e96,
0xceb2, 0xc2d0, 0x43aa, 0x3293, 0x4e93, 0x46fd, 0x43cb, 0x1cf7,
0x4a54, 0x1cd3, 0x9ce2, 0xcedb, 0x443e, 0x4204, 0x1dbc, 0x0f18,
0x4c13, 0x9c6b, 0x4f17, 0x480b, 0xc22f, 0x9df3, 0xc21b, 0xcefb,
0xc4c3, 0xc3e3, 0x5f5d, 0xcfd9, 0x8f04, 0x8f82, 0xcfb0, 0xc9ec,
0xc290, 0x50ab, 0x4f91, 0x4a4e, 0x42b2, 0x4ff4, 0xf0ce, 0x4f76,
0x4a8c, 0xc266, 0x0cf1, 0x4fd6, 0x4824, 0x4306, 0x4700, 0x4e36,
0x4480, 0x4326, 0x1c9e, 0xc36a, 0xce0e, 0xc880, 0xc34e, 0x1f31,
0x9f55, 0x4fda, 0xc312, 0xc96a, 0xc9fd, 0x0483, 0x44b3, 0xc940,
0x4993, 0x96a4, 0xc493, 0x4f4c, 0x49b4, 0xcbe6, 0xc4ec, 0x49a0,
0xc954, 0x5772, 0x44cc, 0x43e6, 0x49f4, 0x958c, 0xc52c, 0x4ee4,
0xc814, 0x97a4, 0x8538, 0xc518, 0xcdf4, 0x4834, 0x214c, 0xc4f0,
0x4c1a, 0xc9e8, 0x4379, 0xc763, 0xcd48, 0xc5c0, 0xc084, 0xcdb3,
0x8d9e, 0x4d94, 0x4aae, 0x40ad, 0xee82, 0x4df5, 0x475d, 0x404d,
0x2d26, 0xcd55, 0xca3b, 0x40ee, 0x4d47, 0x0c7a, 0x0c00, 0x4c32,
0x4496, 0x4129, 0x4c94, 0x8c5e, 0x8c33, 0xcc75, 0xc005, 0xc0cd,
0x1e1b, 0x5ddb, 0x1c6d, 0xce52, 0xc822, 0xc38a, 0xddb1, 0xceb2,
0xc6cc, 0x43aa, 0x1ca0, 0x4e93, 0x45ab, 0x43cb, 0x594f, 0x4e73,
0x4795, 0xc36b, 0x9cfc, 0x1c40, 0x0f14, 0x4f30, 0x4460, 0x4210,
0x4f1b, 0x6a0b, 0x4f1b, 0xc2cb, 0xc243, 0x9ecc, 0xcefb, 0xc517,
0xc3e3, 0x44f1, 0xcfd9, 0x8f14, 0x8f82, 0xcfb0, 0x42b3, 0xc290,
0x1ea2, 0x4f91, 0x4360, 0x42b2, 0x1d76, 0x0fde, 0xcf76, 0x4458,
0xc266, 0xc040, 0x4fd6, 0x4830, 0x4306, 0x7a7c, 0xce36, 0x42ae,
0x4326, 0x6b46, 0xce16, 0xc4c4, 0xc346, 0xceff, 0x0fbe, 0x8fd4,
0x4fda, 0x4666, 0xc96a, 0x9679, 0x44bb, 0x438d, 0x498b, 0x94ec,
0xc82a, 0x7ba3, 0x4490, 0x4fc0, 0xc9c8, 0xcefe, 0xc470, 0xcdb8,
0x4968, 0x97b2, 0x40f7, 0x04f6, 0xc534, 0xcfbc, 0xc80c, 0xca01,
0x8512, 0xc514, 0xc378, 0xc82c, 0x1433, 0x4574, 0x4ca0, 0x49d4,
0xc7e7, 0xc4d8, 0x4b38, 0xc074, 0xddbc, 0x9c83, 0xcdb0, 0xcb78,
0xc0a8, 0x46b9, 0x9d57, 0x0d8e, 0x0dc9, 0x4d79, 0x419f, 0x4055,
0x427c, 0x9fd5, 0x8dfd, 0x4dca, 0x4b26, 0x4106, 0x4603, 0x4c2a,
0x4608, 0x4125, 0x4d1f, 0xcc09, 0xc42d, 0xc0c5, 0xcecb, 0xcde9,
0xc6d3, 0x40e6, 0x9da0, 0x8e76, 0xceb6, 0xc9a2, 0xc38e, 0xc109,
0x0c9b, 0x4e9a, 0x44a2, 0x43c3, 0x8e5e, 0x9e73, 0xf0fe, 0x4e5f,
0x4359, 0xc367, 0xe783, 0x4f38, 0x45c2, 0x4208, 0x4d17, 0x4f18,
0x43d0, 0x4227, 0x1d9f, 0xc93b, 0xcf77, 0xc463, 0xc3cf, 0x9fe4,
0xced7, 0x42f8, 0xc270, 0xcf35, 0x8fff, 0x8f8e, 0x4fad, 0xc710,
0x42ad, 0x1da1, 0x4f8e, 0x48c4, 0x42ce, 0xae9b, 0x1f64, 0x9dfe,
0xcf52, 0xc208, 0x42f2, 0x411b, 0x0e0a, 0x4e36, 0xc8b4, 0x4326,
0x1fa9, 0x4e16, 0xc4ba, 0xc346, 0xc453, 0x8fcc, 0x4fee, 0xc5bc,
0x42ee, 0x91e7, 0xc44e, 0xc81c, 0x498f, 0x4d07, 0x1623, 0x04b7,
0xc493, 0xce9d, 0x49b4, 0x16c1, 0xc4ec, 0xc200, 0xc954, 0xcb75,
0x476c, 0x4450, 0x4810, 0x4808, 0x97a0, 0x851c, 0xc528, 0xc888,
0xc828, 0x6633, 0xc510, 0xcf98, 0x4848, 0x9706, 0x38c4, 0x44d4,
0xc13a, 0xc9ec, 0x5f5d, 0xcdb4, 0xc126, 0xc08c, 0x9f24, 0x9f18,
0x8db4, 0x4d90, 0x44e0, 0x40c9, 0x804a, 0x4d71, 0x4463, 0x4069,
0x4678, 0x9fdd, 0x8de5, 0x4c36, 0x4af0, 0x410e, 0x2815, 0x4c16,
0x46d0, 0x412d, 0x1e85, 0x8c59, 0xcdf9, 0xc0b7, 0xc0d5, 0xc066,
0xcffb, 0x1f5e, 0x0e66, 0xceb6, 0xc510, 0xc38e, 0xdd8c, 0xce96,
0xc62c, 0x43ae, 0x20c2, 0x4ef7, 0x43a3, 0x434f, 0x1cd3, 0x0e7b,
0x4e5b, 0xc2d3, 0xc203, 0x4fbd, 0x0f60, 0x0f16, 0x4f18, 0x4826,
0x4228, 0x4621, 0x4f7f, 0xc49b, 0xc3c7, 0xce7e, 0x8eb4, 0x8eed,
0xcedb, 0x4656, 0xc284, 0xdfb3, 0xc78e, 0xcfac, 0x4341, 0xc2ac,
0x2a89, 0x4f8d, 0x47b0, 0x42ce, 0x335c, 0x4f6e, 0xc7a0, 0x426e,
0x1ca4, 0x9dc2, 0x0e16, 0x4e32, 0x4890, 0x4312, 0xc629, 0x4e12,
0x486e, 0x4332, 0xc741, 0xce72, 0xc7e8, 0xc2d2, 0x1fe9, 0xcfd2,
0x422a, 0x42f2, 0xc437, 0x84ae, 0x048d, 0x44af, 0x496d, 0x49af,
0x96a9, 0xc48f, 0x4dfe, 0x49d0, 0xca51, 0x8450, 0xc454, 0xcdde,
0x496c, 0x44c5, 0x0569, 0x0516, 0xc530, 0xcdda, 0xc828, 0x7238,
0xc518, 0xc3a6, 0xc834, 0xca43, 0x44f8, 0x4896, 0x49d4, 0x4763,
0xc850, 0xcef4, 0x404c, 0xb15f, 0xcd54, 0xca70, 0xc06c, 0x9c7b,
0xcdb4, 0x470c, 0x408c, 0x1f75, 0x0ddd, 0x4de9, 0x4655, 0x40e5,
0x57e1, 0xcdc9, 0xc05d, 0x40d6, 0x46f7, 0x0de4, 0x4dd2, 0x414a,
0x410a, 0x430b, 0x4c31, 0xc773, 0xc34d, 0xce6a, 0xcd6d, 0xce59,
0xc663, 0x4376, 0xe84a, 0xce6a, 0xc5c8, 0xc366, 0x7e54, 0xaa70,
0xceb6, 0x4448, 0x438e, 0x9eb8, 0x0eea, 0x4edf, 0x48bf, 0x43e7,
0x55e4, 0xcf3f, 0xc93f, 0x43e4, 0xeaea, 0x4ed4, 0x4746, 0x4204,
0x330f, 0x4f3b, 0x496b, 0xc247, 0xdcd4, 0x9dd3, 0x8f7b, 0xcf5b,
0xc433, 0x4284, 0xcc57, 0xc768, 0xc26c, 0x9d6e, 0x4f4d, 0xc3b4,
0x428d, 0x40e4, 0x4fae, 0x4688, 0x42d2, 0x4fd4, 0x0fee, 0x4fd6,
0xc71e, 0xc306, 0x5c49, 0xffd1, 0x4822, 0x4fd6, 0xc93c, 0x4306,
0x9d8b, 0x0e0a, 0xce2e, 0xc394, 0x4952, 0x4dea, 0x4557, 0x4456,
0xccaa, 0xc986, 0xc467, 0xa266, 0x4453, 0x43c5, 0x4973, 0x1637,
0x849f, 0xc4b7, 0x436c, 0x49cc, 0x9664, 0xcd64, 0x84e0, 0xc4d0,
0x486e, 0x4808, 0x4a5b, 0x4af5, 0xc441, 0xa2ec, 0x84f2, 0xc534,
0xce82, 0xc804, 0xcb83, 0x8844, 0x4870, 0x4f5e, 0x4568, 0x196b,
0xc848, 0xc590, 0xc054, 0xc247, 0xcd58, 0xc552, 0x4074, 0xffed,
0x4db8, 0x4542, 0x40c5, 0x4df5, 0x46ef, 0x4dd5, 0xc485, 0x40ed,
0xceed, 0xcc35, 0x4684, 0x40ea, 0x4dd9, 0x4730, 0xcdca, 0x404c,
0x4105, 0x5706, 0xce79, 0xc40d, 0xc355, 0x9eee, 0x4e5a, 0xc41d,
0x4376, 0x1c81, 0xce6a, 0xc8d4, 0xc366, 0x9c64, 0x4e4a, 0xc852,
0x4386, 0x1c89, 0x4efb, 0x471d, 0x43e3, 0x4cf5, 0xced5, 0x8cef,
0xcf3f, 0xc735, 0x43e4, 0x4fdb, 0x4ed4, 0x4552, 0xc204, 0x4283,
0x1db7, 0x420b, 0xcf7b, 0xc497, 0xc263, 0x9ddb, 0x5364, 0xc26f,
0x5388, 0x4fb0, 0xc3fe, 0xc26c, 0xcfd9, 0x0f14, 0x0f83, 0x4fb1,
0x47d3, 0x4292, 0x4285, 0x4fee, 0x463c, 0xc2ee, 0xc5e7, 0xcfce,
0xc9c4, 0x430e, 0x9f99, 0xffd4, 0x54ca, 0xcfce, 0xc9ca, 0x430e,
0x5501, 0xce2e, 0xcf92, 0x4952, 0x5142, 0x4452, 0x4236, 0xc972,
0xa4e1, 0xc4b2, 0xc262, 0x496f, 0x2796, 0x444f, 0x4351, 0xc98f,
0x1749, 0x2090, 0x44f0, 0xc85c, 0xc9e8, 0xc441, 0x8483, 0x04f2,
0x4534, 0x43c8, 0x49e8, 0xc441, 0x849e, 0x84f2, 0xc534, 0xcd9c,
0xc804, 0xb907, 0xc878, 0x4016, 0x4554, 0x44e5, 0x44e9, 0x8870,
0xc8b4, 0xcfa0, 0xc068, 0x9fd4, 0xcddd, 0x8c74, 0x0d80, 0xcdb8,
0x4742, 0x40c4, 0x4d7c, 0x0da2, 0x0def, 0x4dd9, 0xc401, 0x40f5,
0x680f, 0xcc39, 0x47c8, 0x40e6, 0x4cea, 0x4dca, 0xc5ca, 0x4106,
0x1e06, 0x4e79, 0xc377, 0xc355, 0xca72, 0xced4, 0x0e49, 0x8e73,
0x4eb6, 0x4576, 0xc36a, 0x9f69, 0xce52, 0xc97c, 0x438a, 0x5984,
0x4eb2, 0x48ca, 0x43cf, 0x1e64, 0x4ed7, 0x46c5, 0xc3ef, 0x5c1c,
0xcf37, 0xc995, 0x43ec, 0xebde, 0x4ecc, 0x46de, 0xc20c, 0x1db8,
0x0f1f, 0x4f7b, 0xc9e9, 0xc263, 0x9ddb, 0x1f9c, 0x2108, 0xcfbf,
0x421c, 0x4288, 0x7f56, 0xf097, 0xcf4c, 0x4a69, 0x428d, 0xec9e,
0x4fad, 0x49f8, 0x42d2, 0x1de1, 0x4fd2, 0xc7e4, 0xc2f2, 0xc56c,
0xce32, 0x49c6, 0x42ee, 0x4ee5, 0x4fce, 0xc590, 0xc30e, 0x5e3e,
0x0e1c, 0xc476, 0xc938, 0x4966, 0x6107, 0x4456, 0x4370, 0xc986,
0xce93, 0xc4b5, 0xc4df, 0x040a, 0x0475, 0x44bb, 0x431b, 0xc98b,
0x9519, 0x44f0, 0x4eb2, 0xc9e8, 0xd988, 0xc4d0, 0xcc18, 0x4808,
0x552f, 0xfaf6, 0x44cc, 0xc3c8, 0xc9f4, 0xf16d, 0xc52c, 0xc8e0,
0xc80c, 0xc87b, 0xe625, 0x4868, 0x4146, 0x4564, 0x1adc, 0x8898,
0xc8b8, 0xc2d6, 0xc064, 0xf549, 0xcd48, 0xca5e, 0x4084, 0xd683,
0x4df8, 0x448e, 0x40d5, 0x4366, 0x5ae2, 0x4dd1, 0xc0ed, 0x4109,
0x9e1e, 0x8c0f, 0x4dda, 0x4742, 0x40f6, 0x5172, 0xcc3a, 0x474c,
0x4345, 0x4743, 0xce69, 0xcb8d, 0xc365, 0xcedc, 0x0e05, 0x8e8f,
0x4eba, 0x44ce, 0xc366, 0x9cde, 0x9f71, 0xceb6, 0x4556, 0xc38e,
0x4cd8, 0x2ace, 0x4edf, 0x468f, 0x43e7, 0x59e9, 0xcf3f, 0x4833,
0xc207, 0xb31a, 0x4ed4, 0x49e4, 0x4204, 0x5c17, 0xcf34, 0x45e6,
0x4247, 0x9c41, 0xcf5f, 0xc2fb, 0xc267, 0x7c48, 0x4fb8, 0xc87b,
0x4288, 0xcc82, 0xcf54, 0xc42c, 0xc284, 0x4090, 0x409c, 0x3394,
0x4ff5, 0x490a, 0x42e6, 0x1ee9, 0x4fd6, 0xc8f0, 0xc306, 0xc605,
0xce36, 0x48ac, 0x42ea, 0x5c69, 0x0e06, 0xce32, 0xc81c, 0x4312,
0xc64d, 0xc46e, 0xcdc8, 0x496e, 0x16da, 0x0462, 0x44ba, 0xce78,
0xc98a, 0x9689, 0xdb65, 0x444f, 0x4da9, 0x498f, 0x168f, 0xc4af,
0xc965, 0x49d4, 0x48e3, 0xc4cc, 0xc9f4, 0xc9f4, 0x97b8, 0x552f,
0xf70b, 0x4528, 0x497c, 0xc9f4, 0x0617, 0xc52c, 0xcce0, 0xc80c,
0xfc2a, 0xc870, 0xc07e, 0x4568, 0x48d5, 0x0804, 0x0872, 0xc8b8,
0xcd32, 0xc594, 0xdd58, 0x9f7f, 0xcdb4, 0xc044, 0x408c, 0xcec2,
0x4df0, 0x4abe, 0x40e9, 0x7f80, 0x4dd1, 0x4b19, 0xc109, 0x4cb4,
0x8c2d, 0x8c13, 0x4dd2, 0x44e2, 0x410a, 0x1eb6, 0x9ebe, 0x483e,
0x4e71, 0x4521, 0xc369, 0xc56b, 0xce51, 0xc4fd, 0x438a, 0x9c35,
0x0e9e, 0x4eaa, 0xc758, 0xc376, 0x9c3a, 0x8e96, 0x4eb2, 0xcb3e,
0x43ce, 0x6ba2, 0x4ed7, 0x4443, 0x43ef, 0x440a, 0xcf37, 0x426d,
0xc20f, 0xc028, 0x4ecc, 0x438c, 0x420c, 0x5f39, 0x8f1a, 0x4f74,
0x4257, 0x4263, 0xce5b, 0x9c67, 0x8f6f, 0x8f83, 0x0f8c, 0x8f87,
0x0f90, 0x0fa4, 0x8f70, 0x8f84, 0x8f8c, 0x0f89, 0x0f91, 0x0fc9,
0x0fd1, 0x0fe6, 0x0fee, 0x0fea, 0x0ff2, 0x8e06, 0x8e0e, 0x8e0a,
0x8e12, 0x0e26, 0x0ff2, 0x0e06, 0x0e0e, 0x8e0a, 0x8e12, 0x844a,
0x8452, 0x8466, 0x846e, 0x046a, 0x0472, 0x0486, 0x048e, 0x848a,
0x8492, 0x84a6, 0x8472, 0x0487, 0x048f, 0x048b, 0x0493, 0x84cb,
0x84d3, 0x04e8, 0x04f0, 0x84ec, 0x84f4, 0x8508, 0x8510, 0x050c,
0x0514, 0x0528, 0x04f4, 0x8508, 0x8510, 0x850c, 0x8514, 0x8844,
0x884c, 0x8854, 0x8868, 0x0864, 0x086c, 0x0874, 0x0888, 0x888c,
};
const auto sz = sizeof(code) / sizeof(*code);

short swp(unsigned short v) {
    // cout << hex << (v & 0xff) << endl;
    return ((v & 0xff) << 8) + (v >> 8); 
}

bool Za(short a, short b) {
    return (a + b) == (short)0;
}

bool Ca(unsigned short a, unsigned short b) {
    return (int)a + (int)b > 0xffff;
}

bool Na(short a, short b) {
    return (short)(a + b) < (short)0;
}

bool Va(short a, short b) {
    return false;
    // return (a >= 0 && b >= 0 && (short)(a + b) < (short)0) ||
    //       (a < 0 && b < 0 && (short)(a + b) >= 0);
}

bool Cs(unsigned short a, unsigned short b) {
    return b >= a;
}

bool Ns(short a, short b) {
    return (short)(b - a) < 0;
}

bool Zs(short a, short b) {
    return a == b;
}

bool Vs(short a, short b) {
#if 0
    if ((a >= 0 && b >= 0) || (a < 0 && b < 0)) {
        return false;
    }
    if (a < 0) {
        swap(a, b);
    }
    return (short)(a - b) < (short)0 || (short)(b - a) >= (short)0;
#endif
    return false;
}

short status(bool v, bool n, bool z, bool c) {
    return (v << 8) + (n << 2) + (z << 1) + c;
}

short statusAdd(short a, short b) {
    return status(Va(a, b), Na(a, b), Za(a, b), Ca(a, b));
}

short statusSub(short a, short b) {
    return status(Vs(a, b), Ns(a, b), Zs(a, b), Cs(a, b));
}

void RRC(short& v, short& sr) {
    bool c = v % 2 == 1;
    v >>= 1;
    
    v &= 0x7fff;
    v |= (sr % 2 == 1) << 15;
    
    sr &= 0xfffe;
    sr |= c;
}

pair<short, short> DAC(short a, short b, short c) {
    // cout << hex << a << " " << b << endl;
    short r = a + b + c;
    short cc = 0;
    if (r >= 10) {
        cc = 1;
        r -= 10;
        r %= 16;
    }
    // cout << hex << cc << " " << r << endl;
    return make_pair(cc, r);
}

int DAA(unsigned short a, unsigned short b, short c) {
    if (a == 0 && b == 0) {
        return c;
    }
    
    auto cur = DAC(a % 16, b % 16, c);
    return DAA(a / 16, b / 16, cur.first) * 16 + cur.second;
}

pair<short, short> DAAD(short a, short b, short sr) {
    auto ret = DAA(a, b, 0);
    if (ret > 0xffff) {
        sr |= 0x1;
        ret -= 0x10000;
    } else {
        sr &= 0xfffe;
    }
    return make_pair(ret, sr);
}

pair<short, short> ADD(short a, short b) {
    return make_pair(a + b, statusAdd(a, b));
}

pair<short, short> SUB(short a, short b) {
    return make_pair(a - b, statusSub(b, a));
}

short translate(short code, short loc) {
    auto location = loc;
    loc = swp(loc);
    
    // short sub = 0x4d2;
    // auto sr = statusSub(sub, loc);
    // loc -= sub;
    short sr = 0;
    tie(loc, sr) = SUB(loc, 0x4d2);
    
    // auto sr2 = statusAdd(loc, sr);
    // loc += sr;
    // sr = sr2;
    tie(loc, sr) = ADD(loc, sr);
    // cout << hex << sr << endl;
    // cout << hex << loc << endl;
    
    // cout << sr << endl;
    RRC(loc, sr);
    
    tie(loc, sr) = DAAD(location, loc, sr);
    
    loc >>= 1;
    RRC(loc, sr);
    // cout << hex << loc << endl;
    // cout << hex << sr << endl;
    
    tie(loc, sr) = DAAD(0x3c01, loc, sr);
    
    tie(loc, sr) = ADD(loc, sr);
    RRC(loc, sr);
    tie(loc, sr) = ADD(loc, 0x100e);
    RRC(loc, sr);
    RRC(loc, sr);
    // cout << hex << loc << endl;
    // cout << hex << sr << endl;
    
    code ^= loc;
    
    return swp(code);
}

unsigned short step(unsigned short loc) {
   // cout << "Step started with " << hex << loc - 2 << endl;

   int base = 0x1402;
   short decoded[16];
   for (int i = 0; i <= 0xc; i += 2) {
      decoded[i / 2] = translate(code[(loc - base) / 2], loc);
      // cout << hex << "(" << code[(loc - base) / 2] << "," << loc << ") => " << decoded[i / 2] << endl;
      loc += 2;
   }

   for (int i = 0; i < 7; ++i) {
      char buf[1024];
      sprintf(buf, "%04x", (unsigned)(unsigned short)decoded[i]);
      // cout << buf << endl;
   }
   // cout << "===========\n";

   // detect signature sequence (max index: 6)
   for (int i = 0; i <= 4; ++i) {
      char buf[1024];
      if (decoded[i] == 0x3c40 && decoded[i + 2] == 0x004d) {
         // sprintf(buf, "found: %04x\n", (unsigned)(unsigned short)swp(decoded[i + 1]));
         // cout << buf;
         for (int j = 0; j < i; ++j) {
            sprintf(buf, "%04x", (unsigned)(unsigned short)decoded[j]);
            cout << buf << endl;
            // cout << hex << decoded[j] << endl;
         }
         return swp(decoded[i + 1]) - (unsigned short)0x3194;
      }
   }

   return 0;
}

bool visited[sz];

bool isVisited(unsigned short loc) {
   if (loc < 0x1402) {
      return true;
   }
   auto idx = (loc - 0x1402) / 2;
   if (idx >= sz) {
      return true;
   }
   return visited[idx];
}

void visit(unsigned short loc) {
   visited[(loc - 0x1402) / 2] = true;
}

int walk(unsigned short loc = 0x18a6) {
    // cout << hex << step(0x18a6) << endl;
    // cout << hex << step(0x19d6) << endl;
    const int N = sz; 
    for (int i = 0; i < N; ++i) {
        // cout << hex << loc << endl;
        // printf("i=%d\n", i);
        loc = step(loc) + 2;
        if (isVisited(loc)) {
           return i + 1;
        }
        visit(loc);
    }
    return N;
}

void search() {
   int start = 0x1400;
   for (int i = 0; i <= sz - 7; ++i) {
      if (walk(start + i * 2 + 2) > 2) {
         cout << hex << (start + 2 + i * 2) << endl;
      }
   }
}

int main()
{
   // printf("hello world\n");
   // cout << hex << swp(0xac4a) << endl;
   // cout << hex << translate(0x4fda, 0x18ac) << endl;
   // cout << hex << translate(0x4486, 0x18ae) << endl;
   // cout << hex << translate(0x42ea, 0x18b0) << endl;
   // cout << hex << translate(0x417d, 0x18b2) << endl;
   // auto ret = DAAD(0xffff, 0xffff, 0);
   // cout << hex << ret.first << " " << ret.second << endl;
   // walk();
   // cout << hex << translate(0x4855, 0x1482) << endl;
   // cout << Ns(0x4d2, 0x8214) << endl; 
   // search();
   // 1402 1406 1434 1466 148c 1494 14be 159e 1614 1698
   // walk(0x1618);
   walk(0x1986);
}
